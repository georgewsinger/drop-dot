;; Analyzed by ClojureScript 1.7.228
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{}, :name drop-dot.core, :imports nil, :requires {node cljs.nodejs, cljs.nodejs cljs.nodejs, cljs.core.async cljs.core.async, s clojure.string, clojure.string clojure.string}, :uses {<! cljs.core.async, buffer cljs.core.async, close! cljs.core.async, offer! cljs.core.async, chan cljs.core.async, >! cljs.core.async, alts! cljs.core.async, poll! cljs.core.async, put! cljs.core.async, take! cljs.core.async}, :defs {drop-line {:protocol-inline nil, :meta {:file "/home/george/Dropbox/drop-dot/src/drop_dot/core.cljs", :line 87, :column 7, :end-line 87, :end-column 16, :arglists (quote ([line]))}, :name drop-dot.core/drop-line, :variadic false, :file "/home/george/Dropbox/drop-dot/src/drop_dot/core.cljs", :end-column 16, :method-params ([line]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists (quote ([line]))}, chan-config-paths {:protocol-inline nil, :meta {:file "/home/george/Dropbox/drop-dot/src/drop_dot/core.cljs", :line 109, :column 7, :end-line 109, :end-column 24, :arglists (quote ([]))}, :name drop-dot.core/chan-config-paths, :variadic false, :file "/home/george/Dropbox/drop-dot/src/drop_dot/core.cljs", :end-column 24, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, jam-first-callback-arg-into-chan {:protocol-inline nil, :meta {:file "/home/george/Dropbox/drop-dot/src/drop_dot/core.cljs", :line 12, :column 7, :end-line 12, :end-column 39, :arglists (quote ([c]))}, :name drop-dot.core/jam-first-callback-arg-into-chan, :variadic false, :file "/home/george/Dropbox/drop-dot/src/drop_dot/core.cljs", :end-column 39, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, link-line {:protocol-inline nil, :meta {:file "/home/george/Dropbox/drop-dot/src/drop_dot/core.cljs", :line 94, :column 7, :end-line 94, :end-column 16, :arglists (quote ([line]))}, :name drop-dot.core/link-line, :variadic false, :file "/home/george/Dropbox/drop-dot/src/drop_dot/core.cljs", :end-column 16, :method-params ([line]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 1, :fn-var true, :arglists (quote ([line]))}, chan-path-exists? {:protocol-inline nil, :meta {:file "/home/george/Dropbox/drop-dot/src/drop_dot/core.cljs", :line 53, :column 7, :end-line 53, :end-column 24, :arglists (quote ([line]))}, :name drop-dot.core/chan-path-exists?, :variadic false, :file "/home/george/Dropbox/drop-dot/src/drop_dot/core.cljs", :end-column 24, :method-params ([line]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([line]))}, -main {:protocol-inline nil, :meta {:file "/home/george/Dropbox/drop-dot/src/drop_dot/core.cljs", :line 125, :column 7, :end-line 125, :end-column 12, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name drop-dot.core/-main, :variadic true, :file "/home/george/Dropbox/drop-dot/src/drop_dot/core.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 125, :end-line 125, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}, drop-chan-verified-droppee {:protocol-inline nil, :meta {:file "/home/george/Dropbox/drop-dot/src/drop_dot/core.cljs", :line 79, :column 7, :end-line 79, :end-column 33, :arglists (quote ([c]))}, :name drop-dot.core/drop-chan-verified-droppee, :variadic false, :file "/home/george/Dropbox/drop-dot/src/drop_dot/core.cljs", :end-column 33, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, chan-config->exec-drop-dot {:protocol-inline nil, :meta {:file "/home/george/Dropbox/drop-dot/src/drop_dot/core.cljs", :line 100, :column 7, :end-line 100, :end-column 33, :arglists (quote ([chan-config cmd]))}, :name drop-dot.core/chan-config->exec-drop-dot, :variadic false, :file "/home/george/Dropbox/drop-dot/src/drop_dot/core.cljs", :end-column 33, :method-params ([chan-config cmd]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 2, :fn-var true, :arglists (quote ([chan-config cmd]))}, chan-vec-cmd->exec {:protocol-inline nil, :meta {:file "/home/george/Dropbox/drop-dot/src/drop_dot/core.cljs", :line 18, :column 7, :end-line 18, :end-column 25, :arglists (quote ([input-chan]))}, :name drop-dot.core/chan-vec-cmd->exec, :variadic false, :file "/home/george/Dropbox/drop-dot/src/drop_dot/core.cljs", :end-column 25, :method-params ([input-chan]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([input-chan]))}, pure-js {:name drop-dot.core/pure-js, :file "/home/george/Dropbox/drop-dot/src/drop_dot/core.cljs", :line 10, :column 1, :end-line 10, :end-column 13, :meta {:file "/home/george/Dropbox/drop-dot/src/drop_dot/core.cljs", :line 10, :column 6, :end-line 10, :end-column 13}}, jam-second-callback-arg-into-chan {:protocol-inline nil, :meta {:file "/home/george/Dropbox/drop-dot/src/drop_dot/core.cljs", :line 15, :column 7, :end-line 15, :end-column 40, :arglists (quote ([c]))}, :name drop-dot.core/jam-second-callback-arg-into-chan, :variadic false, :file "/home/george/Dropbox/drop-dot/src/drop_dot/core.cljs", :end-column 40, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, chan-verified-path->chan-verified-droppee {:protocol-inline nil, :meta {:file "/home/george/Dropbox/drop-dot/src/drop_dot/core.cljs", :line 68, :column 7, :end-line 68, :end-column 48, :arglists (quote ([chan-verified-path]))}, :name drop-dot.core/chan-verified-path->chan-verified-droppee, :variadic false, :file "/home/george/Dropbox/drop-dot/src/drop_dot/core.cljs", :end-column 48, :method-params ([chan-verified-path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 1, :fn-var true, :arglists (quote ([chan-verified-path]))}, line->chan-verified-path {:protocol-inline nil, :meta {:file "/home/george/Dropbox/drop-dot/src/drop_dot/core.cljs", :line 58, :column 7, :end-line 58, :end-column 31, :arglists (quote ([line]))}, :name drop-dot.core/line->chan-verified-path, :variadic false, :file "/home/george/Dropbox/drop-dot/src/drop_dot/core.cljs", :end-column 31, :method-params ([line]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([line]))}, exec-vec-of-commands {:protocol-inline nil, :meta {:file "/home/george/Dropbox/drop-dot/src/drop_dot/core.cljs", :line 28, :column 7, :end-line 28, :end-column 27, :arglists (quote ([v]))}, :name drop-dot.core/exec-vec-of-commands, :variadic false, :file "/home/george/Dropbox/drop-dot/src/drop_dot/core.cljs", :end-column 27, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, protocol-msg? {:protocol-inline nil, :meta {:file "/home/george/Dropbox/drop-dot/src/drop_dot/core.cljs", :line 65, :column 7, :end-line 65, :end-column 20, :arglists (quote ([arg]))}, :name drop-dot.core/protocol-msg?, :variadic false, :file "/home/george/Dropbox/drop-dot/src/drop_dot/core.cljs", :end-column 20, :method-params ([arg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arg]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:else :recur}, :order [:recur :else]}, :doc nil}